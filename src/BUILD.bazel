load("//tools:ng.bzl", "ng_project")
load("//tools:sass.bzl", "sass_binary")
load("//tools:file_collector.bzl", "file_collector")
load("//:defs.bzl", "pkg_web")
load("@aspect_rules_esbuild//esbuild:defs.bzl", "esbuild")
load("@npm//:history-server/package_json.bzl", history_server = "bin")
load("@npm//:tailwindcss/package_json.bzl", tailwindcss = "bin")

package(default_visibility = ["//:__pkg__"])

sass_binary(
    name = "styles",
    srcs = [
        "styles.scss",
        "syntax-highlighting.scss",
    ],
)

file_collector(
    name = "tailwind_content",
    extension = "html",
    deps = [":src"],
)

tailwindcss.tailwindcss(
    name = "tailwindcss",
    stdout = "tailwind.css",
    args = [
        "--config",
        "$(rootpath :tailwind.config.js)",
        "--input",
        "$(rootpath :styles.tailwind.css)",
        "--",
        "$(rootpaths :tailwind_content)",
    ],
    tags = ["no-sandbox"],
    copy_srcs_to_bin = False,
    srcs = [
        ":styles.tailwind.css",
        ":tailwind.config.js",
        ":tailwind_content",
    ],
)

ng_project(
    name = "src",
    srcs = [
        "main.ts",
    ],
    deps = [
        "//src/app",
        "//:node_modules/@angular/common",
        "//:node_modules/@angular/core",
        "//:node_modules/@angular/forms",
        "//:node_modules/@angular/router",
        "//:node_modules/@types/node",
    ],
)

ng_project(
    name = "polyfills",
    srcs = ["polyfills.ts"],
    deps = ["//:node_modules/zone.js"],
    visibility = ["//visibility:private"],
)
esbuild(
    name = "polyfills-bundle",
    entry_point = "polyfills.js",
    srcs = [":polyfills"],
    define = {"process.env.NODE_ENV": "'production'"},
    config = {
        "resolveExtensions": [".mjs", ".js"],
    },
    metafile = False,
    format = "esm",
    minify = True,
)

[pkg_web(
    name = mode,
    entry_point = "main.js",
    entry_deps = [":src"],
    index_html = "main.html",
    html_assets = [
        ":styles.css",
        ":tailwind.css",
    ],
    script_assets = [
        ":polyfills-bundle.js",
    ],
    assets = [],
    production = False if mode == "dev" else True,
) for mode in ["dev", "prod"]]

history_server.history_server_binary(
    name = "devserver",
    args = ["$(location :dev)"],
    data = [":dev"],
    tags = [
        "ibazel_notify_changes",
        "ibazel_live_reload",
    ],
)

history_server.history_server_binary(
    name = "prodserver",
    args = ["$(location :prod)"],
    data = [":prod"],
)
